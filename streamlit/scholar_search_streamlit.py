#!/usr/bin/env python3

"""
Aplicativo Streamlit para busca acad√™mica (scholar) usando a API Serper.
Permite visualizar resultados acad√™micos com diferentes par√¢metros de busca.
"""

import os
import json
import http.client
import streamlit as st
from dotenv import load_dotenv
import html

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar a p√°gina do Streamlit
st.set_page_config(
    page_title="Busca Acad√™mica - Serper API",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS personalizado
st.markdown("""
<style>
    .result-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        border-left: 5px solid #4285F4;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .publication-title {
        color: #1a0dab;
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 10px;
        text-decoration: none;
    }
    .publication-title:hover {
        text-decoration: underline;
    }
    .publication-info {
        color: #006621;
        font-size: 14px;
        margin-bottom: 8px;
    }
    .publication-year {
        color: #545454;
        font-size: 14px;
        margin-bottom: 8px;
    }
    .cited-by {
        color: #545454;
        font-size: 14px;
        font-style: italic;
        margin-bottom: 8px;
    }
    .publication-snippet {
        color: #545454;
        font-size: 14px;
        margin-bottom: 12px;
    }
    .pdf-link {
        background-color: #f8f9fa;
        border: 1px solid #dadce0;
        border-radius: 4px;
        color: #1a73e8;
        display: inline-block;
        font-size: 14px;
        font-weight: 500;
        margin-top: 10px;
        padding: 5px 10px;
        text-decoration: none;
    }
    .pdf-link:hover {
        background-color: #e8f0fe;
        text-decoration: none;
    }
    .credit-counter {
        margin-top: 20px;
        font-size: 14px;
        color: #70757a;
    }
</style>
""", unsafe_allow_html=True)

# Obter a chave da API Serper do ambiente
SERPER_API_KEY = os.getenv("SERPER_API_KEY")
if not SERPER_API_KEY:
    st.error(
        "‚ö†Ô∏è Chave da API Serper n√£o encontrada. "
        "Configure a vari√°vel de ambiente SERPER_API_KEY ou crie um arquivo .env."
    )
    SERPER_API_KEY = ""


# Fun√ß√£o para buscar artigos acad√™micos usando a API Serper
def search_scholar(query, location="United States", gl="us", hl="en", num=10, time_period=None):
    """
    Busca artigos acad√™micos usando a API Serper.
    
    Args:
        query: Termo de busca
        location: Localiza√ß√£o geogr√°fica
        gl: C√≥digo de regi√£o do Google
        hl: C√≥digo de idioma
        num: N√∫mero de resultados
        time_period: Filtro de tempo (qdr:h, qdr:d, qdr:w, qdr:m, qdr:y)
        
    Returns:
        Resultados da busca ou mensagem de erro
    """
    try:
        # Criar conex√£o HTTPS
        conn = http.client.HTTPSConnection('google.serper.dev')
        
        # Preparar payload da requisi√ß√£o
        payload = {
            "q": query,
            "location": location,
            "gl": gl,
            "hl": hl,
            "num": num,
            "type": "scholar"
        }
        
        # Adicionar filtro de tempo se especificado
        if time_period:
            payload["tbs"] = time_period
        
        # Cabe√ßalhos da requisi√ß√£o
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        
        # Fazer a requisi√ß√£o POST
        conn.request('POST', '/scholar', json.dumps(payload), headers)
        
        # Obter resposta
        res = conn.getresponse()
        data = res.read().decode('utf-8')
        
        # Verificar se houve erro na resposta
        if res.status != 200:
            return {"error": f"Erro na API: {res.status} {res.reason}", "raw": data}
        
        # Converter resposta para JSON e retornar
        return json.loads(data)
    
    except Exception as e:
        return {"error": f"Erro na requisi√ß√£o: {str(e)}"}
    
    finally:
        # Fechar conex√£o
        conn.close()


# Interface da Barra Lateral
with st.sidebar:
    st.header("üìö Configura√ß√µes da Busca")
    
    # Campo de busca
    query = st.text_input("Termo de busca", value="intelig√™ncia artificial")
    
    # Sele√ß√£o de regi√£o
    regions = {
        "Brasil": {"gl": "br", "hl": "pt-br", "location": "Brasil"},
        "Estados Unidos": {"gl": "us", "hl": "en", "location": "United States"},
        "Reino Unido": {"gl": "gb", "hl": "en", "location": "United Kingdom"},
        "Espanha": {"gl": "es", "hl": "es", "location": "Espa√±a"},
        "Fran√ßa": {"gl": "fr", "hl": "fr", "location": "France"},
        "Alemanha": {"gl": "de", "hl": "de", "location": "Deutschland"},
        "Jap√£o": {"gl": "jp", "hl": "ja", "location": "Êó•Êú¨"},
        "Austr√°lia": {"gl": "au", "hl": "en", "location": "Australia"},
        "Canad√°": {"gl": "ca", "hl": "en", "location": "Canada"},
        "√çndia": {"gl": "in", "hl": "en", "location": "India"}
    }
    
    selected_region = st.selectbox("Regi√£o", options=list(regions.keys()), index=0)
    region_info = regions[selected_region]
    
    # Filtro de tempo
    time_filters = {
        "Qualquer per√≠odo": None,
        "√öltima hora": "qdr:h",
        "√öltimo dia": "qdr:d",
        "√öltima semana": "qdr:w",
        "√öltimo m√™s": "qdr:m",
        "√öltimo ano": "qdr:y"
    }
    
    selected_time = st.selectbox("Per√≠odo", options=list(time_filters.keys()), index=0)
    time_period = time_filters[selected_time]
    
    # N√∫mero de resultados
    num_results = st.slider("N√∫mero de resultados", min_value=1, max_value=30, value=10, step=1)
    
    # Bot√£o para realizar a busca
    search_button = st.button(
        "üîç Buscar Artigos", 
        type="primary", 
        use_container_width=True
    )

    # Se√ß√£o de informa√ß√µes
    st.divider()
    st.markdown("""
    ### Sobre
    Este aplicativo utiliza a API Serper para buscar 
    publica√ß√µes acad√™micas atrav√©s do Google Scholar. 
    A busca retorna artigos, livros e outras publica√ß√µes
    cient√≠ficas baseadas nos par√¢metros configurados.
    
    Desenvolvido como parte do projeto MCP Server Serper.
    """)

# Cabe√ßalho principal
st.markdown(
    "<div class='header-container'><h1>üìö Busca Acad√™mica - Serper API</h1>"
    "<p>Busque e visualize artigos e publica√ß√µes acad√™micas com a API Serper integrada ao Google Scholar</p></div>", 
    unsafe_allow_html=True
)

# Realizar busca quando o bot√£o for pressionado
if search_button or 'last_results' in st.session_state:
    if search_button or 'last_results' not in st.session_state:
        # Obter par√¢metros da regi√£o selecionada
        region_params = region_info
        
        # Filtro de tempo
        tbs = time_period
        
        # Mostrar spinner durante a busca
        with st.spinner(f'Buscando publica√ß√µes acad√™micas sobre "{query}"...'):
            # Realizar a busca acad√™mica
            results = search_scholar(
                query=query,
                location=region_params["location"],
                gl=region_params["gl"],
                hl=region_params["hl"],
                num=num_results,
                time_period=tbs
            )
            
            # Armazenar os resultados na sess√£o
            st.session_state.last_results = results
            st.session_state.last_query = query
    else:
        # Usar resultados da sess√£o
        results = st.session_state.last_results
        query = st.session_state.last_query
    
    # Verificar se houve erro
    if "error" in results:
        st.error(f"‚ö†Ô∏è {results['error']}")
        if "raw" in results:
            with st.expander("Detalhes do erro"):
                st.code(results["raw"])
    
    # Exibir resultados
    else:
        # Extrair artigos acad√™micos
        organic_items = results.get("organic", [])
        
        # Informa√ß√µes sobre a busca
        if organic_items:
            # Exibir n√∫mero de resultados
            result_info = (
                f"<div class='results-info'><h3>Encontrados {len(organic_items)} "
                f"resultados acad√™micos sobre \"{query}\""
            )
            
            # Exibir informa√ß√µes de cr√©ditos se dispon√≠vel
            if "credits" in results:
                result_info += (
                    f" <span class='credits-info'>Cr√©ditos utilizados: "
                    f"{results['credits']}</span>"
                )
            
            result_info += "</h3></div>"
            st.markdown(result_info, unsafe_allow_html=True)
            
            # Exibir par√¢metros da busca
            with st.expander("Detalhes da requisi√ß√£o"):
                st.json(results.get("searchParameters", {}))
            
            # Exibir os artigos acad√™micos
            for item in organic_items:
                # Obter dados do artigo com escape de caracteres HTML
                title = html.escape(item.get("title", "Sem t√≠tulo"))
                link = html.escape(item.get("link", "#"))
                publication_info = html.escape(item.get("publicationInfo", "Informa√ß√£o n√£o dispon√≠vel"))
                snippet = html.escape(item.get("snippet", ""))
                year = item.get("year", "")
                cited_by = item.get("citedBy", 0)
                pdf_url = html.escape(item.get("pdfUrl", ""))
                
                # Construir HTML de forma segura
                scholar_html = "<div class='result-card'>"
                
                # T√≠tulo e link
                scholar_html += f'<a href="{link}" target="_blank" class="publication-title">{title}</a>'
                
                # Informa√ß√µes da publica√ß√£o e ano
                scholar_html += f'<div class="publication-info">{publication_info}'
                if year:
                    scholar_html += f'<div class="publication-year">Publicado em: {year}</div>'
                scholar_html += '</div>'
                
                # Cita√ß√µes
                if cited_by:
                    scholar_html += f'<div class="cited-by">Citado por: {cited_by} publica√ß√µes</div>'
                
                # Snippet
                if snippet:
                    scholar_html += f'<div class="publication-snippet">{snippet}</div>'
                
                # Links
                scholar_html += f'<a href="{link}" target="_blank" class="pdf-link">Ver publica√ß√£o ‚Üí</a>'
                
                # Link para PDF se dispon√≠vel
                if pdf_url:
                    scholar_html += f'<a href="{pdf_url}" target="_blank" class="pdf-link">üìÑ Download PDF</a>'
                
                # Fechar div do card
                scholar_html += "</div>"
                
                # Renderizar HTML
                st.markdown(scholar_html, unsafe_allow_html=True)
        else:
            st.info(f"Nenhuma publica√ß√£o acad√™mica encontrada para '{query}' com os par√¢metros selecionados.")

# Mensagem inicial quando nenhuma busca foi realizada
else:
    st.info("üëà Configure os par√¢metros e clique em 'Buscar Artigos' para come√ßar.")
    
    # Exibir exemplos de termos de busca
    st.markdown("""
    ### Exemplos de termos para busca:
    - intelig√™ncia artificial
    - machine learning
    - ci√™ncia de dados
    - teoria dos grafos
    - algoritmos gen√©ticos
    - an√°lise de sentimentos
    - processamento de linguagem natural
    """)

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.markdown("### Sobre este aplicativo")
st.sidebar.markdown("""
Este aplicativo utiliza a API Serper para realizar buscas no Google Scholar e exibir os resultados em um formato amig√°vel.

Cada busca consome cr√©ditos da sua conta na API Serper.
""")

if __name__ == "__main__":
    # O Streamlit executa todo o script em todas as intera√ß√µes,
    # ent√£o n√£o √© necess√°rio um loop principal expl√≠cito
    pass 