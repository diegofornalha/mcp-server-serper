#!/usr/bin/env python3

"""
Aplicativo Streamlit para visualizar resultados de busca de imagens da API Serper.
"""

import os
import json
import http.client
import streamlit as st
from PIL import Image
from io import BytesIO
import requests
import html

# Tentar importar dotenv, mas n√£o √© obrigat√≥rio
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# Obter a chave da API do ambiente
SERPER_API_KEY = os.getenv("SERPER_API_KEY")
if not SERPER_API_KEY:
    st.warning("‚ö†Ô∏è Chave da API Serper n√£o encontrada. Configure a vari√°vel de ambiente SERPER_API_KEY ou crie um arquivo .env.")
    SERPER_API_KEY = "5b5305befa6a1187c56d7ba06e2971aca87e6a0e"  # Chave padr√£o para testes

def search_images(query, location="Brazil", gl="br", hl="pt-br", num=10):
    """
    Realiza uma busca de imagens usando a API Serper.
    
    Args:
        query: Consulta de busca
        location: Localiza√ß√£o para resultados
        gl: C√≥digo da regi√£o
        hl: C√≥digo de idioma
        num: N√∫mero de resultados
        
    Returns:
        Resultados da busca de imagens
    """
    try:
        conn = http.client.HTTPSConnection('google.serper.dev')
        payload = json.dumps({
            "q": query,
            "location": location,
            "gl": gl,
            "hl": hl,
            "num": num
        })
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        
        # Enviar requisi√ß√£o
        conn.request('POST', '/images', payload, headers)
        
        # Receber resposta
        res = conn.getresponse()
        data = res.read()
        
        if res.status != 200:
            return {"error": f"Erro na API: {res.status} {res.reason}", "raw": data.decode('utf-8')}
            
        return json.loads(data.decode('utf-8'))
    except Exception as e:
        return {"error": f"Erro na requisi√ß√£o: {str(e)}"}
    finally:
        conn.close()

def load_image_from_url(url):
    """
    Carrega uma imagem a partir de uma URL
    
    Args:
        url: URL da imagem
        
    Returns:
        Objeto de imagem ou None se falhar
    """
    try:
        response = requests.get(url, timeout=5)
        image = Image.open(BytesIO(response.content))
        return image
    except Exception:
        return None

def main():
    """Fun√ß√£o principal do aplicativo Streamlit."""
    
    # Configura√ß√µes da p√°gina
    st.set_page_config(
        page_title="Busca de Imagens - Serper API",
        page_icon="üñºÔ∏è",
        layout="wide"
    )
    
    # T√≠tulo e cabe√ßalho
    st.title("üñºÔ∏è Visualizador de Busca de Imagens")
    st.markdown(
        """
        Pesquise imagens usando a API Serper e visualize os resultados.
        Este aplicativo demonstra a integra√ß√£o com a [API Serper](https://serper.dev/) para busca de imagens.
        """
    )
    
    # Barra lateral para configura√ß√µes de busca
    with st.sidebar:
        st.header("Configura√ß√µes da Busca")
        
        # Campo de busca
        query = st.text_input("Termo de busca", value="")
        
        # Configura√ß√µes regionais
        col1, col2 = st.columns(2)
        with col1:
            gl = st.selectbox(
                "Regi√£o",
                options=["br", "us", "uk", "ca", "au", "in", "de", "fr", "es", "it", "jp"],
                format_func=lambda x: {"br": "Brasil", "us": "EUA", "uk": "Reino Unido", 
                                       "ca": "Canad√°", "au": "Austr√°lia", "in": "√çndia",
                                       "de": "Alemanha", "fr": "Fran√ßa", "es": "Espanha",
                                       "it": "It√°lia", "jp": "Jap√£o"}[x],
                index=0
            )
        
        with col2:
            hl = st.selectbox(
                "Idioma",
                options=["pt-br", "en", "es", "fr", "de", "it", "ja"],
                format_func=lambda x: {"pt-br": "Portugu√™s", "en": "Ingl√™s", "es": "Espanhol", 
                                       "fr": "Franc√™s", "de": "Alem√£o", "it": "Italiano", 
                                       "ja": "Japon√™s"}[x],
                index=0
            )
        
        # Localiza√ß√£o
        location = st.text_input("Localiza√ß√£o", value="Brazil")
        
        # N√∫mero de resultados
        num_results = st.slider("N√∫mero de resultados", min_value=5, max_value=50, value=10, step=5)
        
        # Bot√£o de busca
        search_button = st.button("üîç Buscar Imagens", type="primary")
        
        st.divider()
        
        # Informa√ß√µes adicionais
        st.markdown("""
        ### Sobre
        
        Este aplicativo usa a API Serper para buscar imagens no Google.
        
        **Desenvolvido com:**
        - Streamlit
        - Serper API
        - Python
        
        [Ver documenta√ß√£o da API](https://serper.dev/docs)
        """)
    
    # Tela principal - Resultados da busca
    if search_button and query:
        with st.spinner(f"Buscando imagens para: '{query}'..."):
            results = search_images(query, location, gl, hl, num_results)
        
        if "error" in results:
            st.error(f"Erro ao realizar a busca: {results['error']}")
            if "raw" in results:
                with st.expander("Detalhes do erro"):
                    st.code(results["raw"])
        elif not results.get("images"):
            st.warning(f"Nenhuma imagem encontrada para '{query}'")
        else:
            # Exibir par√¢metros da busca
            with st.expander("Par√¢metros da Busca"):
                st.json(results.get("searchParameters", {}))
            
            # Exibir resultados
            st.subheader(f"Resultados para: '{query}'")
            st.write(f"Encontradas {len(results.get('images', []))} imagens")
            
            # Criar grid para as imagens - 3 por linha
            cols = st.columns(3)
            
            # Exibir cada imagem em um card
            for i, image in enumerate(results.get("images", [])):
                with cols[i % 3]:
                    st.markdown(f"**{html.escape(image.get('title', 'Sem t√≠tulo'))}**")
                    
                    # Exibir a imagem
                    st.image(
                        image.get('thumbnailUrl', ''), 
                        use_column_width=True,
                        caption=f"Fonte: {image.get('source', 'Desconhecida')}"
                    )
                    
                    # Informa√ß√µes adicionais
                    st.markdown(f"**Dimens√µes:** {image.get('imageWidth', '?')}x{image.get('imageHeight', '?')}")
                    
                    # Links
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown(f"[Ver p√°gina]({image.get('link', '#')})")
                    with col2:
                        st.markdown(f"[Ver imagem]({image.get('imageUrl', '#')})")
                    
                    st.divider()
    elif not query and search_button:
        st.warning("Por favor, insira um termo de busca.")
    else:
        # Mensagem inicial quando nenhuma busca foi realizada
        st.info("üëà Configure os par√¢metros de busca na barra lateral e clique em 'Buscar Imagens' para visualizar os resultados.")
        
        # Imagem exemplo
        st.image("https://serper.dev/images/hero.png", caption="API Serper - Busca de imagens")
        
        # Instru√ß√µes de uso
        st.markdown("""
        ## Como usar
        
        1. Digite sua consulta de busca no campo apropriado
        2. Ajuste os par√¢metros de regi√£o e idioma, se necess√°rio
        3. Selecione o n√∫mero de resultados desejado usando o controle deslizante
        4. Clique em "Buscar Imagens"
        5. Navegue pelos resultados exibidos na grade de imagens
        
        ## Recursos
        
        - **Visualiza√ß√£o em grade**: Veja m√∫ltiplas imagens em um layout organizado
        - **Detalhes da imagem**: Veja t√≠tulo, fonte e dimens√µes de cada imagem
        - **Links diretos**: Acesse facilmente a p√°gina original ou a imagem em tamanho completo
        - **Personaliza√ß√£o da busca**: Configure a regi√£o, idioma e quantidade de resultados
        """)

if __name__ == "__main__":
    main() 